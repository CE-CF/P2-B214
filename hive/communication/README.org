#+title: README for communications module
#+author: Simon Christensen
* Protocol specification
** Protocol fields
+-----------+-----------------+-------------+-----------------+
| Data Type | Checksum(SHA2)  | Destination | Data            |
| 2 bits    | 256 bits        | 4 bytes     | variable length |
+-----------+-----------------+-------------+-----------------+
*** Destinations
 - Operator PC
 - Data management system
 - Relay box
 - Drone [1-??]
**** Destination format
The destination should be the internal ip address of the target.
: 10.10.10.10
*** Type definitions
**** Waypoint sequence
Value: 0b00
Corresponding data format
: lat1:long1;lat2:long2;lat3:long3;lat4:long4;
xy-delim: ":"
point-delim: ";"
**** Boundary points
Value: 0b01
Corresponding data format
: lat1:long1;lat2:long2;lat3:long3;lat4:long4;
xy-delim: ":"
point-delim: ";"
**** Drone cmd
Value: 0b10
Corresponding data format example
: up 50; forward 20; emergency;
**** Heart beat
Value: 0b11
No need for data
* Class diagrams
#+begin_src plantuml :file classdiagram.png
  title Class diagram for communications module

  class Packet{
          Description
          ..
          This is the class for our
          protocol packet.
          --
          Attributes:
          ..
          -p_checksum
          +p_type
          +p_dest
          +p_data
          --
          Methods:
          ..
          -set_checksum()
  }

  abstract class Server{
          Description
          ..
          This is the base class for our
          server classes. It also acts as a
          template for the client class
          --
          Attributes:
          ..
          -server_port_udp : Integer
          -server_port_tcp : Integer
          -packet : Packet
          __
          Methods
          ..
          +encode_packet()
          +decode_packet()
          ..Abstract methods..
          +{abstract} run()
  }

  class DMSServer{
          Description
          ..
          This class will be used by
          the DMS to receive messages
          from OPCClient and RBClient
  }

  class RBServer{
          Description
          ..
          This class wil be used by
          the relay box to receive
          messages from the DMSClient
  }

  class Client{
          Attributes:
          ..
          -server_port
          -server_ip
          -server_hostname
          --
          Methods
          ..
          +encode_packet()
          +decode_packet()

  }

  class DMSClient{
          Description
          ..
          This class will be used by
          the DMS to send messages to
          RBServer
  }

  class OPCClient{
          Description
          ..
          This class will be used by
          the OPC to send messages to
          DMSServer
  }

  class RBClient{
          Description
          ..
          This class will be used by
          the relay box to send messages to
          DMSServer
  }

  Client o-- OPCClient
  Client o-- RBClient
  Client o-- DMSClient

  class Client extends Server

  Server o-- DMSServer 
  Server o-- RBServer  

  Server - Packet : send/receive >
  Packet - Client : > send/receive 
#+end_src

#+RESULTS:
[[file:classdiagram.png]]
