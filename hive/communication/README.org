#+title: README for communications module
#+author: Simon Christensen
* Protocol specification
** Protocol fields
+-----------+-----------------+-------------+-----------------+
| Data Type | Checksum(SHA2)  | Destination | Data            |
| 2 bits    | 256 bits        | 4 bytes     | variable length |
+-----------+-----------------+-------------+-----------------+
*** Destinations
 - Operator PC
 - Data management system
 - Relay box
 - Drone [1-??]
**** Destination format
The destination should be the internal ip address of the target.
: 10.10.10.10
*** Type definitions
**** Waypoint sequence
Value: 0b00
Corresponding data format
: lat1:long1;lat2:long2;lat3:long3;lat4:long4;
xy-delim: ":"
point-delim: ";"
**** Boundary points
Value: 0b01
Corresponding data format
: lat1:long1;lat2:long2;lat3:long3;lat4:long4;
xy-delim: ":"
point-delim: ";"
**** Drone cmd
Value: 0b10
Corresponding data format example
: up 50; forward 20; emergency;
**** Heart beat
Value: 0b11
No need for data
* Class diagrams
#+begin_src plantuml :file classdiagram.png
  title Class diagram for communications module

  class Packet{
          Description
          ..
          This is the class for our
          protocol packet.
          --
          Attributes:
          ..
          -_p_type : Integer
          -_p_checksum : Bytes
          -_p_dest : IPAddress
          -_p_data : String
          --
          Methods:
          ..static..
          +{static}encode_packet() : Bytes
          +{static}decode_packet() : Packet
          +{static}calc_checksum() : Bytes
          ..setters..
          +p_type(p_type : (String | Integer)) : void
          +p_checksum(checksum : Bytes) : void
          +p_dest(dest : String) : void
          +p_data(data : String) : void
          ..getters..
          +p_type() : Integer
          +p_checksum() : Bytes
          +p_dest() : IPAddress
          +p_data() : String
          ..Misc..
          +dump() : void
  }

  abstract class Server{
          Description
          ..
          This is the base class for our
          server classes. 
          --
          Attributes:
          ..
          -_srv_port_tcp : Integer
          -_srv_port_udp : Integer
          -_srv_socket : socket
          __
          Methods
          ..setters..
          +srv_port_tcp(port: Integer) : void
          +srv_port_udp(port: Integer) : void
          +srv_socket(sock : socket) : void
          ..getters..
          +srv_port_tcp() : Integer
          +srv_port_udp() : Integer
          +srv_socket() : socket
          ..other..
          +{abstract} run() : void
          -_accept() : (conn: socket, addr: Address)
          +reply_heart(conn : socket) : void
  }

  class DMSServer{
          Description
          ..
          This class will be used by
          the DMS to receive messages
          from OPCClient and RBClient
  }

  class RBServer{
          Description
          ..
          This class wil be used by
          the relay box to receive
          messages from the DMSClient
  }

  class Client{
          Description
          ..
          This is the Client base class, it connects to the server and manages the heart beat automatically.
          --
          Attributes:
          ..
          -_srv_port_tcp : Integer
          -_srv_port_udp : Integer
          -_srv_ip
          -_client_sock
          -_pulse : bool
          --
          Methods
          ..setters..
          +srv_port_tcp(port : Integer) : void
          +srv_port_udp(port : Integer) : void
          +srv_ip(ip) : void
          +client_sock(sock : socket) : void
          +pulse(pulse : bool) : void
          ..getters..
          +srv_port_tcp() : Integer
          +srv_port_udp() : Integer
          +srv_ip() : String
          +client_sock() : socket
          +pulse() : bool
          ..other..
          +connect(mode : bool) : void
          +send_message(mtype : (String | Integer), mdest : String, mdata : String) : void
          +send_heartbeat() : void
          +{abstract}run(packet : Packet) : void
  }

  class DMSClient{
          Description
          ..
          This class will be used by
          the DMS to send messages to
          RBServer
  }

  class OPCClient{
          Description
          ..
          This class will be used by
          the OPC to send messages to
          DMSServer
  }

  class RBClient{
          Description
          ..
          This class will be used by
          the relay box to send messages to
          DMSServer
  }

  Client o-- OPCClient
  Client o-- RBClient
  Client o-- DMSClient


  Server o-- DMSServer 
  Server o-- RBServer  

  Server - Packet : send/receive >
  Packet - Client : > send/receive 
#+end_src

#+RESULTS:
[[file:classdiagram.png]]
