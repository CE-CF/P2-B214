#+title: README for communications module
#+author: Simon Christensen
* Protocol specification
** Protocol fields
+-----------+---------------------+-------------+-----------------+
| Data Type | Checksum(SHA2)      | Destination | Data            |
| 2 bits    | 256 bits (32 bytes) | 4 bytes     | variable length |
+-----------+---------------------+-------------+-----------------+
*** Destinations
 - Operator PC
 - Data management system
 - Relay box
 - Drone [1-??]
**** Destination format
The destination should be the internal ip address of the target.
: 10.10.10.10
*** Type definitions
**** Waypoint sequence
Value: 0b00
Corresponding data format
: lat1:long1;lat2:long2;lat3:long3;lat4:long4;
xy-delim: ":"
point-delim: ";"
**** Boundary points
Value: 0b01
Corresponding data format
: lat1:long1;lat2:long2;lat3:long3;lat4:long4;
xy-delim: ":"
point-delim: ";"
**** Drone cmd
Value: 0b10
Corresponding data format example
: up 50; forward 20; emergency;
**** Heart beat
Value: 0b11
No need for data
But commands for managing client and server interaction can be added into the data segment of the protocol.
***** Commands
Commands should be written in the following format.
: CMD:MIGRATE;P:3333;

Like a dictionary of sorts, where the key ~CMD~ defines which commands should be run.
All ~key:value~ pair following should be seen as arguments to the command.

*Commands:*
 - MIGRATE :: Used for migrating clients to another server thread
   - P :: Port number for the new server

* Class diagrams
#+begin_src plantuml :file classdiagram.png
  title Class diagram for communications module

  class Packet{
          Description
          ..
          This is the class for our
          protocol packet.
          --
          Attributes:
          ..
          -_p_checksum : Bytes
          -_p_type : Integer
          -_p_dest : IPAddress
          -_p_data : String
          --
          Methods:
          ..static..
          +{static}encode_packet() : Bytes
          +{static}decode_packet() : Packet
          +{static}calc_checksum() : Bytes
          ..setters..
          +p_type(p_type : (String | Integer)) : void
          +p_checksum(checksum : Bytes) : void
          +p_dest(dest : String) : void
          +p_data(data : String) : void
          ..getters..
          +p_type() : Integer
          +p_checksum() : Bytes
          +p_dest() : IPAddress
          +p_data() : String
          ..Misc..
          +dump(log : bool, to_stdout : bool) : void
          +data_parser() : Dictionary
  }

  abstract class Server{
          Description
          ..
          This is the base class for our
          server classes. 
          --
          Attributes:
          ..
          -_srv_port_tcp : Integer
          -_srv_port_udp : Integer
          -_srv_socket : socket
          __
          Methods
          ..setters..
          +srv_port_tcp(port: Integer) : void
          +srv_port_udp(port: Integer) : void
          +srv_socket(sock : socket) : void
          ..getters..
          +srv_port_tcp() : Integer
          +srv_port_udp() : Integer
          +srv_socket() : socket
          ..other..
          +start() : void
          +{abstract} run() : void
          -_accept_tcp() : (conn: socket, addr: Address)
          +reply_heart(conn : socket) : void
  }

  class TCPClientHandler extends Thread{
          +thread_id : Integer
          +client_conn : socket
          +client_addr : Tuple
          +target : Function

          +log_info(msg : String) : void
          +log_warning(msg : String) : void
          +recvall(conn : socket) : bytes
          +reply_heart(conn : socket) : void
          +create_thread_server() : socket
          +run() : void
  }

  class DMSServer{
          Description
          ..
          This class will be used by
          the DMS to receive messages
          from OPCClient and RBClient
  }

  class RBServer{
          Description
          ..
          This class wil be used by
          the relay box to receive
          messages from the DMSClient
  }

  class Client{
          Description
          ..
          This is the Client base class, it connects to the server and manages the heart beat automatically.
          --
          Attributes:
          ..
          -_srv_port_tcp : Integer
          -_srv_port_udp : Integer
          -_srv_ip
          -_client_sock
          -_pulse : bool
          --
          Methods
          ..setters..
          +srv_port_tcp(port : Integer) : void
          +srv_port_udp(port : Integer) : void
          +srv_ip(ip) : void
          +client_sock(sock : socket) : void
          +pulse(pulse : bool) : void
          ..getters..
          +srv_port_tcp() : Integer
          +srv_port_udp() : Integer
          +srv_ip() : String
          +client_sock() : socket
          +pulse() : bool
          ..other..
          +log_info(msg : String) : void
          +log_warning(msg : String) : void
          +connect(mode : bool) : void
          +recvall() : bytes
          +send_message(mtype : (String | Integer), mdest : String, mdata : String) : void
          +send_heartbeat() : void
          +{abstract}run(packet : Packet) : void
  }

  class DMSClient{
          Description
          ..
          This class will be used by
          the DMS to send messages to
          RBServer
  }

  class OPCClient{
          Description
          ..
          This class will be used by
          the OPC to send messages to
          DMSServer
  }

  class RBClient{
          Description
          ..
          This class will be used by
          the relay box to send messages to
          DMSServer
  }

  Server *-- TCPClientHandler

  Client o-- OPCClient
  Client o-- RBClient
  Client o-- DMSClient


  Server o-- DMSServer 
  Server o-- RBServer  

  Server - Packet : send/receive >
  Packet - Client : > send/receive 
#+end_src

#+RESULTS:
[[file:classdiagram.png]]

[[file:classdiagram.png]]

* Sequence diagrams
#+begin_src plantuml :file sequence1.png
  title Sequence for pre-defined route
  skinparam backgroundColor #FFFFFF
  actor Operator
  participant OperatorPC
  participant DMS
  actor FirstResponder
  participant RelayBox
  participant Drones

  Operator->OperatorPC: Start
  activate OperatorPC
          OperatorPC->DMS: Create connection
          activate DMS
                  DMS-->OperatorPC: Accept connection
                  Operator->OperatorPC: Create wayp/boundary
                  OperatorPC->DMS: Send created wayp/boundary
                  DMS->DMS: Calculate route
                  activate DMS
                          DMS->OperatorPC: Send calculated route
                  deactivate DMS
                  OperatorPC->Operator: Get confirmation for route
                  Operator-->OperatorPC: Confirm
                  OperatorPC->DMS: Send confirmation


  FirstResponder->RelayBox: Start
  activate RelayBox
  FirstResponder->Drones: Start
                  activate Drones
                          Drones->RelayBox: Connect to hotspot
                  deactivate Drones
                  RelayBox->DMS: Create connection
                          DMS-->RelayBox: Accept connection
                          RelayBox->DMS: Send connected drones
                          DMS->RelayBox: Send confirmed route
                          loop while cmds in data
                                  RelayBox->Drones: Send commands
                                  activate Drones
                                          Drones-->RelayBox: Send response
                                          Drones->Drones: Do cmd
                                          Drones->RelayBox: Send data string
                                  deactivate Drones
                                  RelayBox->DMS: Forward data string
                          deactivate RelayBox
                          DMS->OperatorPC: Update drone position on UI
                  end
                  loop while drone is active
                          Drones->RelayBox: Send Videofeed
                          activate Drones
                          deactivate Drones
                          activate RelayBox
                                  RelayBox->DMS: Forward Videofeed
                                  deactivate RelayBox
                          DMS->OperatorPC: Forward Videofeed
                  end
          deactivate DMS
  deactivate OperatorPC



#+end_src

[[file:sequence1.png]]


#+begin_src plantuml :file sequence2.png
  title Sequence diagram for Joystick controls
  skinparam backgroundColor #FFFFFF
  actor Operator
  participant OperatorPC
  participant DMS
  actor FirstResponder
  participant RelayBox
  participant Drones

  Operator->OperatorPC: Start
  activate OperatorPC
          OperatorPC->DMS: Create connection
          activate DMS
                  DMS-->OperatorPC: Accept connection



  FirstResponder->RelayBox: Start
  activate RelayBox
  FirstResponder->Drones: Start
                  activate Drones
                          Drones->RelayBox: Connect to hotspot
                  deactivate Drones
                  RelayBox->DMS: Create connection
                          DMS-->RelayBox: Accept connection
                  loop while drone is active
                          Drones->RelayBox: Send Videofeed
                          activate Drones
                          deactivate Drones
                          RelayBox->DMS: Forward Videofeed
                          DMS->OperatorPC: Forward Videofeed
                  end
                          Operator->OperatorPC: Use joystick
                          OperatorPC->DMS: Send RC commands
                          DMS->RelayBox: Forward RC commands
                                  RelayBox->Drones: Forward RC commands
                                  activate Drones
                                          Drones-->RelayBox: Send response
                                          Drones->Drones: Do cmd
                                          Drones->RelayBox: Send data string
                                  deactivate Drones
                                  RelayBox->DMS: Forward data string
                          deactivate RelayBox
                  DMS->OperatorPC: Update drone position on UI

          deactivate DMS
  deactivate OperatorPC
#+end_src

[[file:sequence2.png]]
